// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: package.capnp

#include "package.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<173> b_842cb2753c174959 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     89,  73,  23,  60, 117, 178,  44, 132,
     14,   0,   0,   0,   3,   0,   0,   0,
    147, 150, 249, 125, 117,  77,  89, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 135,   3,   0,   0,
    133,   2,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     56,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,  96, 159,  28, 226, 244, 203, 228,
    220, 145,  70,  15, 140, 214, 231, 209,
    177,   1,   0,   0, 186,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   1,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    189, 222,  42, 173, 112, 168, 139, 151,
    122, 222, 198,  33,  20,  23, 182, 179,
    161,   1,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   1,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    122,  46, 196, 200, 234, 131, 243, 164,
     12,  44, 149, 114, 246,  36,  80, 245,
    145,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   1,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    169, 246, 208, 138, 240,  28,  27, 154,
      2, 192, 240, 234,  84,  10, 117, 150,
    121,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   1,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    140, 240,  58, 228, 131, 192,  20, 173,
     14,   4,  27,   9, 239,  99, 137, 214,
    101,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   1,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    144, 223, 216, 125, 207, 203, 149, 193,
    204,  13,  97, 135,   3, 124, 144, 187,
     81,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   1,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    107,  19,  20,  92,  45, 189, 129, 254,
      5, 228, 114, 197, 234, 164, 180, 226,
     57,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   1,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     68,  96, 127, 130, 177, 228,  23, 223,
      6, 179,  23, 231, 221,  85,  95, 166,
     37,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   1,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     69, 206, 144,   6,  74,   5, 146, 231,
     56,  48, 184,  65, 152, 137,  37, 231,
     17,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0,   7,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      1, 126, 200,  94, 153, 104, 115, 176,
     97,  66, 123, 109,  48, 188, 139, 192,
    253,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    245,   0,   0,   0,   7,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
    171, 125,  86, 242, 127, 211,  31, 225,
    198,  71,  83, 245, 163,  80,  41, 140,
    233,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    225,   0,   0,   0,   7,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      4, 232, 102, 112, 162, 249,  40, 147,
     78, 102, 204, 230, 204,  24,  16, 168,
    213,   0,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,   7,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
    218,  72, 226, 240,  86, 151, 236, 255,
    227,  19,  97, 148, 134, 181, 163, 140,
    197,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,   0,   0,   0,   7,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
    179, 230,  68,  22,  75, 105,  82, 128,
    152,  58,  13,  51,  98, 231, 183, 225,
    177,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,   7,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 101, 114,
     80,  97,  99, 107,  97, 103, 101,  77,
     97, 110,  97, 103, 101, 114,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 112, 100,  97, 116, 101, 115,  65,
    118,  97, 105, 108,  97,  98, 108, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 100, 100,  78, 111, 100, 101,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 112, 100,  97, 116, 101,  78, 111,
    100, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 109, 111, 118, 101,  78, 111,
    100, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 100, 100,  69, 100, 103, 101,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 109, 111, 118, 101,  69, 100,
    103, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  68, 101, 102,  97, 117,
    108, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  79, 118, 101, 114, 114,
    105, 100, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  70,  97, 108, 108,  98,
     97,  99, 107,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  65, 108, 108,  86,  97,
    108, 117, 101, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  65, 118,  97, 105, 108,
     97,  98, 108, 101,  80,  97,  99, 107,
     97, 103, 101, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  80,  97,  99, 107,  97,
    103, 101,  74, 115, 111, 110,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  70, 108, 111, 119,  74,
    115, 111, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_842cb2753c174959 = b_842cb2753c174959.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_842cb2753c174959[] = {
  &s_8052694b1644e6b3,
  &s_8c2950a3f55347c6,
  &s_8ca3b586946113e3,
  &s_9328f9a27066e804,
  &s_96750a54eaf0c002,
  &s_978ba870ad2adebd,
  &s_9a1b1cf08ad0f6a9,
  &s_a4f383eac8c42e7a,
  &s_a65f55dde717b306,
  &s_a81018cce6cc664e,
  &s_ad14c083e43af08c,
  &s_b07368995ec87e01,
  &s_b3b6171421c6de7a,
  &s_bb907c0387610dcc,
  &s_c08bbc306d7b4261,
  &s_c195cbcf7dd8df90,
  &s_d1e7d68c0f4691dc,
  &s_d68963ef091b040e,
  &s_df17e4b1827f6044,
  &s_e11fd37ff2567dab,
  &s_e1b7e762330d3a98,
  &s_e2b4a4eac572e405,
  &s_e4cbf4e21c9f6030,
  &s_e725899841b83038,
  &s_e792054a0690ce45,
  &s_f55024f672952c0c,
  &s_fe81bd2d5c14136b,
  &s_ffec9756f0e248da,
};
static const uint16_t m_842cb2753c174959[] = {5, 2, 10, 11, 13, 12, 0, 6, 4, 7, 9, 8, 3, 1};
const ::capnp::_::RawSchema s_842cb2753c174959 = {
  0x842cb2753c174959, b_842cb2753c174959.words, 173, d_842cb2753c174959, m_842cb2753c174959,
  28, 14, nullptr, nullptr, nullptr, { &s_842cb2753c174959, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<56> b_e4cbf4e21c9f6030 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     48,  96, 159,  28, 226, 244, 203, 228,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 114, 101, 103,
    105, 115, 116, 101, 114,  80,  97,  99,
    107,  97, 103, 101,  77,  97, 110,  97,
    103, 101, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
    112,  97,  99, 107,  97, 103, 101,  68,
    101, 116,  97, 105, 108, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    223, 245, 237,  99,   3,  41, 145, 161,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  77,
     97, 110,  97, 103, 101, 114,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     24, 133,   1, 144,  93,  95, 126, 152,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e4cbf4e21c9f6030 = b_e4cbf4e21c9f6030.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e4cbf4e21c9f6030[] = {
  &s_987e5f5d90018518,
  &s_a191290363edf5df,
};
static const uint16_t m_e4cbf4e21c9f6030[] = {0, 1};
static const uint16_t i_e4cbf4e21c9f6030[] = {0, 1};
const ::capnp::_::RawSchema s_e4cbf4e21c9f6030 = {
  0xe4cbf4e21c9f6030, b_e4cbf4e21c9f6030.words, 56, d_e4cbf4e21c9f6030, m_e4cbf4e21c9f6030,
  2, 2, i_e4cbf4e21c9f6030, nullptr, nullptr, { &s_e4cbf4e21c9f6030, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_d1e7d68c0f4691dc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    220, 145,  70,  15, 140, 214, 231, 209,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 114, 101, 103,
    105, 115, 116, 101, 114,  80,  97,  99,
    107,  97, 103, 101,  77,  97, 110,  97,
    103, 101, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d1e7d68c0f4691dc = b_d1e7d68c0f4691dc.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d1e7d68c0f4691dc = {
  0xd1e7d68c0f4691dc, b_d1e7d68c0f4691dc.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d1e7d68c0f4691dc, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_978ba870ad2adebd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    189, 222,  42, 173, 112, 168, 139, 151,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 117, 112, 100,
     97, 116, 101, 115,  65, 118,  97, 105,
    108,  97,  98, 108, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    112,  97,  99, 107,  97, 103, 101,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_978ba870ad2adebd = b_978ba870ad2adebd.words;
#if !CAPNP_LITE
static const uint16_t m_978ba870ad2adebd[] = {0};
static const uint16_t i_978ba870ad2adebd[] = {0};
const ::capnp::_::RawSchema s_978ba870ad2adebd = {
  0x978ba870ad2adebd, b_978ba870ad2adebd.words, 35, nullptr, m_978ba870ad2adebd,
  0, 1, i_978ba870ad2adebd, nullptr, nullptr, { &s_978ba870ad2adebd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_b3b6171421c6de7a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    122, 222, 198,  33,  20,  23, 182, 179,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 117, 112, 100,
     97, 116, 101, 115,  65, 118,  97, 105,
    108,  97,  98, 108, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_b3b6171421c6de7a = b_b3b6171421c6de7a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b3b6171421c6de7a = {
  0xb3b6171421c6de7a, b_b3b6171421c6de7a.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b3b6171421c6de7a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a4f383eac8c42e7a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    122,  46, 196, 200, 234, 131, 243, 164,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46,  97, 100, 100,
     78, 111, 100, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    110, 111, 100, 101,  68, 101, 116,  97,
    105, 108, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    254,  42,  89,  63,  70, 185, 192, 243,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a4f383eac8c42e7a = b_a4f383eac8c42e7a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a4f383eac8c42e7a[] = {
  &s_f3c0b9463f592afe,
};
static const uint16_t m_a4f383eac8c42e7a[] = {0};
static const uint16_t i_a4f383eac8c42e7a[] = {0};
const ::capnp::_::RawSchema s_a4f383eac8c42e7a = {
  0xa4f383eac8c42e7a, b_a4f383eac8c42e7a.words, 34, d_a4f383eac8c42e7a, m_a4f383eac8c42e7a,
  1, 1, i_a4f383eac8c42e7a, nullptr, nullptr, { &s_a4f383eac8c42e7a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_f55024f672952c0c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     12,  44, 149, 114, 246,  36,  80, 245,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46,  97, 100, 100,
     78, 111, 100, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
     73, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f55024f672952c0c = b_f55024f672952c0c.words;
#if !CAPNP_LITE
static const uint16_t m_f55024f672952c0c[] = {0, 1};
static const uint16_t i_f55024f672952c0c[] = {0, 1};
const ::capnp::_::RawSchema s_f55024f672952c0c = {
  0xf55024f672952c0c, b_f55024f672952c0c.words, 49, nullptr, m_f55024f672952c0c,
  0, 2, i_f55024f672952c0c, nullptr, nullptr, { &s_f55024f672952c0c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9a1b1cf08ad0f6a9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    169, 246, 208, 138, 240,  28,  27, 154,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 117, 112, 100,
     97, 116, 101,  78, 111, 100, 101,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    110, 111, 100, 101,  68, 101, 116,  97,
    105, 108, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    254,  42,  89,  63,  70, 185, 192, 243,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9a1b1cf08ad0f6a9 = b_9a1b1cf08ad0f6a9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9a1b1cf08ad0f6a9[] = {
  &s_f3c0b9463f592afe,
};
static const uint16_t m_9a1b1cf08ad0f6a9[] = {0};
static const uint16_t i_9a1b1cf08ad0f6a9[] = {0};
const ::capnp::_::RawSchema s_9a1b1cf08ad0f6a9 = {
  0x9a1b1cf08ad0f6a9, b_9a1b1cf08ad0f6a9.words, 34, d_9a1b1cf08ad0f6a9, m_9a1b1cf08ad0f6a9,
  1, 1, i_9a1b1cf08ad0f6a9, nullptr, nullptr, { &s_9a1b1cf08ad0f6a9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_96750a54eaf0c002 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      2, 192, 240, 234,  84,  10, 117, 150,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 117, 112, 100,
     97, 116, 101,  78, 111, 100, 101,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
     73, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_96750a54eaf0c002 = b_96750a54eaf0c002.words;
#if !CAPNP_LITE
static const uint16_t m_96750a54eaf0c002[] = {0, 1};
static const uint16_t i_96750a54eaf0c002[] = {0, 1};
const ::capnp::_::RawSchema s_96750a54eaf0c002 = {
  0x96750a54eaf0c002, b_96750a54eaf0c002.words, 49, nullptr, m_96750a54eaf0c002,
  0, 2, i_96750a54eaf0c002, nullptr, nullptr, { &s_96750a54eaf0c002, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_ad14c083e43af08c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    140, 240,  58, 228, 131, 192,  20, 173,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 114, 101, 109,
    111, 118, 101,  78, 111, 100, 101,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
     73, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ad14c083e43af08c = b_ad14c083e43af08c.words;
#if !CAPNP_LITE
static const uint16_t m_ad14c083e43af08c[] = {0};
static const uint16_t i_ad14c083e43af08c[] = {0};
const ::capnp::_::RawSchema s_ad14c083e43af08c = {
  0xad14c083e43af08c, b_ad14c083e43af08c.words, 34, nullptr, m_ad14c083e43af08c,
  0, 1, i_ad14c083e43af08c, nullptr, nullptr, { &s_ad14c083e43af08c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d68963ef091b040e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     14,   4,  27,   9, 239,  99, 137, 214,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 114, 101, 109,
    111, 118, 101,  78, 111, 100, 101,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
     73, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d68963ef091b040e = b_d68963ef091b040e.words;
#if !CAPNP_LITE
static const uint16_t m_d68963ef091b040e[] = {0};
static const uint16_t i_d68963ef091b040e[] = {0};
const ::capnp::_::RawSchema s_d68963ef091b040e = {
  0xd68963ef091b040e, b_d68963ef091b040e.words, 34, nullptr, m_d68963ef091b040e,
  0, 1, i_d68963ef091b040e, nullptr, nullptr, { &s_d68963ef091b040e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_c195cbcf7dd8df90 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    144, 223, 216, 125, 207, 203, 149, 193,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46,  97, 100, 100,
     69, 100, 103, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 100, 103, 101,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    219, 233, 228, 226,  47, 209, 225, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c195cbcf7dd8df90 = b_c195cbcf7dd8df90.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c195cbcf7dd8df90[] = {
  &s_dbe1d12fe2e4e9db,
};
static const uint16_t m_c195cbcf7dd8df90[] = {0};
static const uint16_t i_c195cbcf7dd8df90[] = {0};
const ::capnp::_::RawSchema s_c195cbcf7dd8df90 = {
  0xc195cbcf7dd8df90, b_c195cbcf7dd8df90.words, 33, d_c195cbcf7dd8df90, m_c195cbcf7dd8df90,
  1, 1, i_c195cbcf7dd8df90, nullptr, nullptr, { &s_c195cbcf7dd8df90, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_bb907c0387610dcc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    204,  13,  97, 135,   3, 124, 144, 187,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46,  97, 100, 100,
     69, 100, 103, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,  32,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    101, 100, 103, 101,  73, 100,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  79, 110, 108, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb907c0387610dcc = b_bb907c0387610dcc.words;
#if !CAPNP_LITE
static const uint16_t m_bb907c0387610dcc[] = {1, 0};
static const uint16_t i_bb907c0387610dcc[] = {0, 1};
const ::capnp::_::RawSchema s_bb907c0387610dcc = {
  0xbb907c0387610dcc, b_bb907c0387610dcc.words, 49, nullptr, m_bb907c0387610dcc,
  0, 2, i_bb907c0387610dcc, nullptr, nullptr, { &s_bb907c0387610dcc, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_fe81bd2d5c14136b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    107,  19,  20,  92,  45, 189, 129, 254,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 114, 101, 109,
    111, 118, 101,  69, 100, 103, 101,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 100, 103, 101,  73, 100,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fe81bd2d5c14136b = b_fe81bd2d5c14136b.words;
#if !CAPNP_LITE
static const uint16_t m_fe81bd2d5c14136b[] = {0};
static const uint16_t i_fe81bd2d5c14136b[] = {0};
const ::capnp::_::RawSchema s_fe81bd2d5c14136b = {
  0xfe81bd2d5c14136b, b_fe81bd2d5c14136b.words, 33, nullptr, m_fe81bd2d5c14136b,
  0, 1, i_fe81bd2d5c14136b, nullptr, nullptr, { &s_fe81bd2d5c14136b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_e2b4a4eac572e405 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      5, 228, 114, 197, 234, 164, 180, 226,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 114, 101, 109,
    111, 118, 101,  69, 100, 103, 101,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 100, 103, 101,  73, 100,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e2b4a4eac572e405 = b_e2b4a4eac572e405.words;
#if !CAPNP_LITE
static const uint16_t m_e2b4a4eac572e405[] = {0};
static const uint16_t i_e2b4a4eac572e405[] = {0};
const ::capnp::_::RawSchema s_e2b4a4eac572e405 = {
  0xe2b4a4eac572e405, b_e2b4a4eac572e405.words, 33, nullptr, m_e2b4a4eac572e405,
  0, 1, i_e2b4a4eac572e405, nullptr, nullptr, { &s_e2b4a4eac572e405, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_df17e4b1827f6044 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68,  96, 127, 130, 177, 228,  23, 223,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 115, 101, 116,
     68, 101, 102,  97, 117, 108, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
     73, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 102,  97, 117, 108, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    106,  85, 251,  71, 229, 138, 175, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_df17e4b1827f6044 = b_df17e4b1827f6044.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_df17e4b1827f6044[] = {
  &s_e8af8ae547fb556a,
};
static const uint16_t m_df17e4b1827f6044[] = {1, 0};
static const uint16_t i_df17e4b1827f6044[] = {0, 1};
const ::capnp::_::RawSchema s_df17e4b1827f6044 = {
  0xdf17e4b1827f6044, b_df17e4b1827f6044.words, 49, d_df17e4b1827f6044, m_df17e4b1827f6044,
  1, 2, i_df17e4b1827f6044, nullptr, nullptr, { &s_df17e4b1827f6044, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_a65f55dde717b306 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      6, 179,  23, 231, 221,  85,  95, 166,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 115, 101, 116,
     68, 101, 102,  97, 117, 108, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_a65f55dde717b306 = b_a65f55dde717b306.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a65f55dde717b306 = {
  0xa65f55dde717b306, b_a65f55dde717b306.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a65f55dde717b306, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<96> b_e792054a0690ce45 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     69, 206, 144,   6,  74,   5, 146, 231,
     21,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 115, 101, 116,
     79, 118, 101, 114, 114, 105, 100, 101,
     36,  80,  97, 114,  97, 109, 115,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    152,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,  64,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    144,   0,   0,   0,   3,   0,   1,   0,
    156,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,  65,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
     73, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 118, 101, 114, 114, 105, 100, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    106,  85, 251,  71, 229, 138, 175, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 117, 114,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99, 116, 105, 118, 101,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 112, 117, 116,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e792054a0690ce45 = b_e792054a0690ce45.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e792054a0690ce45[] = {
  &s_e8af8ae547fb556a,
};
static const uint16_t m_e792054a0690ce45[] = {3, 2, 4, 0, 1};
static const uint16_t i_e792054a0690ce45[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_e792054a0690ce45 = {
  0xe792054a0690ce45, b_e792054a0690ce45.words, 96, d_e792054a0690ce45, m_e792054a0690ce45,
  1, 5, i_e792054a0690ce45, nullptr, nullptr, { &s_e792054a0690ce45, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_e725899841b83038 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     56,  48, 184,  65, 152, 137,  37, 231,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 115, 101, 116,
     79, 118, 101, 114, 114, 105, 100, 101,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e725899841b83038 = b_e725899841b83038.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e725899841b83038 = {
  0xe725899841b83038, b_e725899841b83038.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e725899841b83038, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_b07368995ec87e01 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      1, 126, 200,  94, 153, 104, 115, 176,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 115, 101, 116,
     70,  97, 108, 108,  98,  97,  99, 107,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
     73, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  97, 108, 108,  98,  97,  99, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    106,  85, 251,  71, 229, 138, 175, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b07368995ec87e01 = b_b07368995ec87e01.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b07368995ec87e01[] = {
  &s_e8af8ae547fb556a,
};
static const uint16_t m_b07368995ec87e01[] = {1, 0};
static const uint16_t i_b07368995ec87e01[] = {0, 1};
const ::capnp::_::RawSchema s_b07368995ec87e01 = {
  0xb07368995ec87e01, b_b07368995ec87e01.words, 50, d_b07368995ec87e01, m_b07368995ec87e01,
  1, 2, i_b07368995ec87e01, nullptr, nullptr, { &s_b07368995ec87e01, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_c08bbc306d7b4261 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     97,  66, 123, 109,  48, 188, 139, 192,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 115, 101, 116,
     70,  97, 108, 108,  98,  97,  99, 107,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c08bbc306d7b4261 = b_c08bbc306d7b4261.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c08bbc306d7b4261 = {
  0xc08bbc306d7b4261, b_c08bbc306d7b4261.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c08bbc306d7b4261, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_e11fd37ff2567dab = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    171, 125,  86, 242, 127, 211,  31, 225,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 103, 101, 116,
     65, 108, 108,  86,  97, 108, 117, 101,
    115,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e11fd37ff2567dab = b_e11fd37ff2567dab.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e11fd37ff2567dab = {
  0xe11fd37ff2567dab, b_e11fd37ff2567dab.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e11fd37ff2567dab, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_8c2950a3f55347c6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    198,  71,  83, 245, 163,  80,  41, 140,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 103, 101, 116,
     65, 108, 108,  86,  97, 108, 117, 101,
    115,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    110, 111, 100, 101, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    212, 234, 183,  57,  74, 204,  63, 162,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8c2950a3f55347c6 = b_8c2950a3f55347c6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8c2950a3f55347c6[] = {
  &s_a23fcc4a39b7ead4,
};
static const uint16_t m_8c2950a3f55347c6[] = {0};
static const uint16_t i_8c2950a3f55347c6[] = {0};
const ::capnp::_::RawSchema s_8c2950a3f55347c6 = {
  0x8c2950a3f55347c6, b_8c2950a3f55347c6.words, 38, d_8c2950a3f55347c6, m_8c2950a3f55347c6,
  1, 1, i_8c2950a3f55347c6, nullptr, nullptr, { &s_8c2950a3f55347c6, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_9328f9a27066e804 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      4, 232, 102, 112, 162, 249,  40, 147,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 103, 101, 116,
     65, 118,  97, 105, 108,  97,  98, 108,
    101,  80,  97,  99, 107,  97, 103, 101,
    115,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9328f9a27066e804 = b_9328f9a27066e804.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9328f9a27066e804 = {
  0x9328f9a27066e804, b_9328f9a27066e804.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9328f9a27066e804, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<41> b_a81018cce6cc664e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     78, 102, 204, 230, 204,  24,  16, 168,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 103, 101, 116,
     65, 118,  97, 105, 108,  97,  98, 108,
    101,  80,  97,  99, 107,  97, 103, 101,
    115,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     44,   0,   0,   0,   2,   0,   1,   0,
     97, 118,  97, 105, 108,  97,  98, 108,
    101,  80,  97,  99, 107,  97, 103, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    223, 245, 237,  99,   3,  41, 145, 161,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a81018cce6cc664e = b_a81018cce6cc664e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a81018cce6cc664e[] = {
  &s_a191290363edf5df,
};
static const uint16_t m_a81018cce6cc664e[] = {0};
static const uint16_t i_a81018cce6cc664e[] = {0};
const ::capnp::_::RawSchema s_a81018cce6cc664e = {
  0xa81018cce6cc664e, b_a81018cce6cc664e.words, 41, d_a81018cce6cc664e, m_a81018cce6cc664e,
  1, 1, i_a81018cce6cc664e, nullptr, nullptr, { &s_a81018cce6cc664e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_ffec9756f0e248da = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    218,  72, 226, 240,  86, 151, 236, 255,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 103, 101, 116,
     80,  97,  99, 107,  97, 103, 101,  74,
    115, 111, 110,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    112,  97,  99, 107,  97, 103, 101,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ffec9756f0e248da = b_ffec9756f0e248da.words;
#if !CAPNP_LITE
static const uint16_t m_ffec9756f0e248da[] = {0};
static const uint16_t i_ffec9756f0e248da[] = {0};
const ::capnp::_::RawSchema s_ffec9756f0e248da = {
  0xffec9756f0e248da, b_ffec9756f0e248da.words, 35, nullptr, m_ffec9756f0e248da,
  0, 1, i_ffec9756f0e248da, nullptr, nullptr, { &s_ffec9756f0e248da, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8ca3b586946113e3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    227,  19,  97, 148, 134, 181, 163, 140,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 103, 101, 116,
     80,  97,  99, 107,  97, 103, 101,  74,
    115, 111, 110,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    106, 115, 111, 110,  68,  97, 116,  97,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8ca3b586946113e3 = b_8ca3b586946113e3.words;
#if !CAPNP_LITE
static const uint16_t m_8ca3b586946113e3[] = {0};
static const uint16_t i_8ca3b586946113e3[] = {0};
const ::capnp::_::RawSchema s_8ca3b586946113e3 = {
  0x8ca3b586946113e3, b_8ca3b586946113e3.words, 35, nullptr, m_8ca3b586946113e3,
  0, 1, i_8ca3b586946113e3, nullptr, nullptr, { &s_8ca3b586946113e3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_8052694b1644e6b3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    179, 230,  68,  22,  75, 105,  82, 128,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 103, 101, 116,
     70, 108, 111, 119,  74, 115, 111, 110,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_8052694b1644e6b3 = b_8052694b1644e6b3.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8052694b1644e6b3 = {
  0x8052694b1644e6b3, b_8052694b1644e6b3.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8052694b1644e6b3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e1b7e762330d3a98 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    152,  58,  13,  51,  98, 231, 183, 225,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 110,
    103, 105, 110, 101,  46, 103, 101, 116,
     70, 108, 111, 119,  74, 115, 111, 110,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    106, 115, 111, 110,  68,  97, 116,  97,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e1b7e762330d3a98 = b_e1b7e762330d3a98.words;
#if !CAPNP_LITE
static const uint16_t m_e1b7e762330d3a98[] = {0};
static const uint16_t i_e1b7e762330d3a98[] = {0};
const ::capnp::_::RawSchema s_e1b7e762330d3a98 = {
  0xe1b7e762330d3a98, b_e1b7e762330d3a98.words, 35, nullptr, m_e1b7e762330d3a98,
  0, 1, i_e1b7e762330d3a98, nullptr, nullptr, { &s_e1b7e762330d3a98, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<73> b_987e5f5d90018518 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     24, 133,   1, 144,  93,  95, 126, 152,
     14,   0,   0,   0,   3,   0,   0,   0,
    147, 150, 249, 125, 117,  77,  89, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   1,   0,   0,
    245,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
     99, 107,  97, 103, 101,  77,  97, 110,
     97, 103, 101, 114,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233,  32, 135, 145,  37,  38, 253, 184,
     45,  30,  57,  77, 229, 168, 146, 225,
    145,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    241, 125, 121, 153,  96, 194, 198, 229,
    116, 183, 185, 154,  15, 139,  68, 245,
    125,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     32,  40, 191, 161, 237,  36,  28, 174,
    201, 134, 135,  74,   8,  22, 206, 203,
    105,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    148, 253, 251, 220, 143, 108, 136, 210,
    230, 153, 158,  30,  34,  98,  54, 236,
     85,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    237,  35, 252, 234, 122, 221, 170, 249,
    217, 165,  16,  46,  93, 151,  52, 234,
     65,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
    105, 110, 115, 116,  97, 110, 116, 105,
     97, 116, 101,  78, 111, 100, 101,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 109, 111, 118, 101,  78, 111,
    100, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  85, 112, 100,  97, 116,
    101, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    101, 118,  97, 108, 117,  97, 116, 101,
     78, 111, 100, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 115, 101, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_987e5f5d90018518 = b_987e5f5d90018518.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_987e5f5d90018518[] = {
  &s_ae1c24eda1bf2820,
  &s_b8fd2625918720e9,
  &s_cbce16084a8786c9,
  &s_d2886c8fdcfbfd94,
  &s_e192a8e54d391e2d,
  &s_e5c6c26099797df1,
  &s_ea34975d2e10a5d9,
  &s_ec3662221e9e99e6,
  &s_f5448b0f9ab9b774,
  &s_f9aadd7aeafc23ed,
};
static const uint16_t m_987e5f5d90018518[] = {3, 2, 0, 1, 4};
const ::capnp::_::RawSchema s_987e5f5d90018518 = {
  0x987e5f5d90018518, b_987e5f5d90018518.words, 73, d_987e5f5d90018518, m_987e5f5d90018518,
  10, 5, nullptr, nullptr, nullptr, { &s_987e5f5d90018518, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_b8fd2625918720e9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233,  32, 135, 145,  37,  38, 253, 184,
     29,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
     99, 107,  97, 103, 101,  77,  97, 110,
     97, 103, 101, 114,  46, 105, 110, 115,
    116,  97, 110, 116, 105,  97, 116, 101,
     78, 111, 100, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
     73, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b8fd2625918720e9 = b_b8fd2625918720e9.words;
#if !CAPNP_LITE
static const uint16_t m_b8fd2625918720e9[] = {0};
static const uint16_t i_b8fd2625918720e9[] = {0};
const ::capnp::_::RawSchema s_b8fd2625918720e9 = {
  0xb8fd2625918720e9, b_b8fd2625918720e9.words, 36, nullptr, m_b8fd2625918720e9,
  0, 1, i_b8fd2625918720e9, nullptr, nullptr, { &s_b8fd2625918720e9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_e192a8e54d391e2d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     45,  30,  57,  77, 229, 168, 146, 225,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
     99, 107,  97, 103, 101,  77,  97, 110,
     97, 103, 101, 114,  46, 105, 110, 115,
    116,  97, 110, 116, 105,  97, 116, 101,
     78, 111, 100, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e192a8e54d391e2d = b_e192a8e54d391e2d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e192a8e54d391e2d = {
  0xe192a8e54d391e2d, b_e192a8e54d391e2d.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e192a8e54d391e2d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e5c6c26099797df1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    241, 125, 121, 153,  96, 194, 198, 229,
     29,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
     99, 107,  97, 103, 101,  77,  97, 110,
     97, 103, 101, 114,  46, 114, 101, 109,
    111, 118, 101,  78, 111, 100, 101,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
     73, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e5c6c26099797df1 = b_e5c6c26099797df1.words;
#if !CAPNP_LITE
static const uint16_t m_e5c6c26099797df1[] = {0};
static const uint16_t i_e5c6c26099797df1[] = {0};
const ::capnp::_::RawSchema s_e5c6c26099797df1 = {
  0xe5c6c26099797df1, b_e5c6c26099797df1.words, 35, nullptr, m_e5c6c26099797df1,
  0, 1, i_e5c6c26099797df1, nullptr, nullptr, { &s_e5c6c26099797df1, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_f5448b0f9ab9b774 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    116, 183, 185, 154,  15, 139,  68, 245,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
     99, 107,  97, 103, 101,  77,  97, 110,
     97, 103, 101, 114,  46, 114, 101, 109,
    111, 118, 101,  78, 111, 100, 101,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_f5448b0f9ab9b774 = b_f5448b0f9ab9b774.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f5448b0f9ab9b774 = {
  0xf5448b0f9ab9b774, b_f5448b0f9ab9b774.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f5448b0f9ab9b774, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_ae1c24eda1bf2820 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     32,  40, 191, 161, 237,  36,  28, 174,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
     99, 107,  97, 103, 101,  77,  97, 110,
     97, 103, 101, 114,  46, 103, 101, 116,
     85, 112, 100,  97, 116, 101, 115,  36,
     80,  97, 114,  97, 109, 115,   0,   0, }
};
::capnp::word const* const bp_ae1c24eda1bf2820 = b_ae1c24eda1bf2820.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ae1c24eda1bf2820 = {
  0xae1c24eda1bf2820, b_ae1c24eda1bf2820.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ae1c24eda1bf2820, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_cbce16084a8786c9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    201, 134, 135,  74,   8,  22, 206, 203,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
     99, 107,  97, 103, 101,  77,  97, 110,
     97, 103, 101, 114,  46, 103, 101, 116,
     85, 112, 100,  97, 116, 101, 115,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    111, 117, 116, 112, 117, 116, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    114, 125,  90, 223, 142,  61, 234, 224,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cbce16084a8786c9 = b_cbce16084a8786c9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cbce16084a8786c9[] = {
  &s_e0ea3d8edf5a7d72,
};
static const uint16_t m_cbce16084a8786c9[] = {0};
static const uint16_t i_cbce16084a8786c9[] = {0};
const ::capnp::_::RawSchema s_cbce16084a8786c9 = {
  0xcbce16084a8786c9, b_cbce16084a8786c9.words, 38, d_cbce16084a8786c9, m_cbce16084a8786c9,
  1, 1, i_cbce16084a8786c9, nullptr, nullptr, { &s_cbce16084a8786c9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_d2886c8fdcfbfd94 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    148, 253, 251, 220, 143, 108, 136, 210,
     29,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
     99, 107,  97, 103, 101,  77,  97, 110,
     97, 103, 101, 114,  46, 101, 118,  97,
    108, 117,  97, 116, 101,  78, 111, 100,
    101,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
     73, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d2886c8fdcfbfd94 = b_d2886c8fdcfbfd94.words;
#if !CAPNP_LITE
static const uint16_t m_d2886c8fdcfbfd94[] = {0};
static const uint16_t i_d2886c8fdcfbfd94[] = {0};
const ::capnp::_::RawSchema s_d2886c8fdcfbfd94 = {
  0xd2886c8fdcfbfd94, b_d2886c8fdcfbfd94.words, 36, nullptr, m_d2886c8fdcfbfd94,
  0, 1, i_d2886c8fdcfbfd94, nullptr, nullptr, { &s_d2886c8fdcfbfd94, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_ec3662221e9e99e6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    230, 153, 158,  30,  34,  98,  54, 236,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
     99, 107,  97, 103, 101,  77,  97, 110,
     97, 103, 101, 114,  46, 101, 118,  97,
    108, 117,  97, 116, 101,  78, 111, 100,
    101,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    111, 117, 116, 112, 117, 116, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    106,  85, 251,  71, 229, 138, 175, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ec3662221e9e99e6 = b_ec3662221e9e99e6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ec3662221e9e99e6[] = {
  &s_e8af8ae547fb556a,
};
static const uint16_t m_ec3662221e9e99e6[] = {0};
static const uint16_t i_ec3662221e9e99e6[] = {0};
const ::capnp::_::RawSchema s_ec3662221e9e99e6 = {
  0xec3662221e9e99e6, b_ec3662221e9e99e6.words, 39, d_ec3662221e9e99e6, m_ec3662221e9e99e6,
  1, 1, i_ec3662221e9e99e6, nullptr, nullptr, { &s_ec3662221e9e99e6, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_f9aadd7aeafc23ed = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    237,  35, 252, 234, 122, 221, 170, 249,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
     99, 107,  97, 103, 101,  77,  97, 110,
     97, 103, 101, 114,  46, 114, 101, 115,
    101, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f9aadd7aeafc23ed = b_f9aadd7aeafc23ed.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f9aadd7aeafc23ed = {
  0xf9aadd7aeafc23ed, b_f9aadd7aeafc23ed.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f9aadd7aeafc23ed, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_ea34975d2e10a5d9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    217, 165,  16,  46,  93, 151,  52, 234,
     29,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
     99, 107,  97, 103, 101,  77,  97, 110,
     97, 103, 101, 114,  46, 114, 101, 115,
    101, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ea34975d2e10a5d9 = b_ea34975d2e10a5d9.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ea34975d2e10a5d9 = {
  0xea34975d2e10a5d9, b_ea34975d2e10a5d9.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ea34975d2e10a5d9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<87> b_a23fcc4a39b7ead4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    212, 234, 183,  57,  74, 204,  63, 162,
     14,   0,   0,   0,   1,   0,   1,   0,
    147, 150, 249, 125, 117,  77,  89, 212,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  78, 111,
    100, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    156,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
     73, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 100, 101,  78,  97, 109, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 112, 117, 116, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    106,  85, 251,  71, 229, 138, 175, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116, 112, 117, 116, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    106,  85, 251,  71, 229, 138, 175, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a23fcc4a39b7ead4 = b_a23fcc4a39b7ead4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a23fcc4a39b7ead4[] = {
  &s_e8af8ae547fb556a,
};
static const uint16_t m_a23fcc4a39b7ead4[] = {2, 0, 1, 3};
static const uint16_t i_a23fcc4a39b7ead4[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_a23fcc4a39b7ead4 = {
  0xa23fcc4a39b7ead4, b_a23fcc4a39b7ead4.words, 87, d_a23fcc4a39b7ead4, m_a23fcc4a39b7ead4,
  1, 4, i_a23fcc4a39b7ead4, nullptr, nullptr, { &s_a23fcc4a39b7ead4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<80> b_dbe1d12fe2e4e9db = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    219, 233, 228, 226,  47, 209, 225, 219,
     14,   0,   0,   0,   1,   0,   1,   0,
    147, 150, 249, 125, 117,  77,  89, 212,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  69, 100,
    103, 101,  77, 101, 115, 115,  97, 103,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
    102, 114, 111, 109,  73, 110, 115, 116,
     97, 110,  99, 101,  73, 100,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 111,  73, 110, 115, 116,  97, 110,
     99, 101,  73, 100,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116,  78,  97, 109, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110,  78,  97, 109, 101,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dbe1d12fe2e4e9db = b_dbe1d12fe2e4e9db.words;
#if !CAPNP_LITE
static const uint16_t m_dbe1d12fe2e4e9db[] = {0, 3, 2, 1};
static const uint16_t i_dbe1d12fe2e4e9db[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_dbe1d12fe2e4e9db = {
  0xdbe1d12fe2e4e9db, b_dbe1d12fe2e4e9db.words, 80, nullptr, m_dbe1d12fe2e4e9db,
  0, 4, i_dbe1d12fe2e4e9db, nullptr, nullptr, { &s_dbe1d12fe2e4e9db, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<111> b_f3c0b9463f592afe = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    254,  42,  89,  63,  70, 185, 192, 243,
     14,   0,   0,   0,   1,   0,   3,   0,
    147, 150, 249, 125, 117,  77,  89, 212,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  87,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  78, 111,
    100, 101,  68, 101, 116,  97, 105, 108,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     24,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   0,   0,   0,   3,   0,   1,   0,
    176,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   0,   0,   0,   3,   0,   1,   0,
    180,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    177,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   0,   0,   0,   3,   0,   1,   0,
    184,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    180,   0,   0,   0,   3,   0,   1,   0,
    192,   0,   0,   0,   2,   0,   1,   0,
    110, 111, 100, 101,  73, 100,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114, 101, 110, 116,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 115,  88,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0, 255, 255, 255, 127,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 115,  89,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0, 255, 255, 255, 127,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
     73, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0, 255, 255, 255, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f3c0b9463f592afe = b_f3c0b9463f592afe.words;
#if !CAPNP_LITE
static const uint16_t m_f3c0b9463f592afe[] = {5, 0, 1, 2, 3, 4};
static const uint16_t i_f3c0b9463f592afe[] = {0, 1, 2, 3, 4, 5};
const ::capnp::_::RawSchema s_f3c0b9463f592afe = {
  0xf3c0b9463f592afe, b_f3c0b9463f592afe.words, 111, nullptr, m_f3c0b9463f592afe,
  0, 6, i_f3c0b9463f592afe, nullptr, nullptr, { &s_f3c0b9463f592afe, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_a191290363edf5df = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    223, 245, 237,  99,   3,  41, 145, 161,
     14,   0,   0,   0,   1,   0,   1,   0,
    147, 150, 249, 125, 117,  77,  89, 212,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
     99, 107,  97, 103, 101,  68, 101, 116,
     97, 105, 108, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
    112,  97,  99, 107,  97, 103, 101,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  78,
     97, 109, 101,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  86,
    101, 114, 115, 105, 111, 110,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a191290363edf5df = b_a191290363edf5df.words;
#if !CAPNP_LITE
static const uint16_t m_a191290363edf5df[] = {0, 1, 2};
static const uint16_t i_a191290363edf5df[] = {0, 1, 2};
const ::capnp::_::RawSchema s_a191290363edf5df = {
  0xa191290363edf5df, b_a191290363edf5df.words, 66, nullptr, m_a191290363edf5df,
  0, 3, i_a191290363edf5df, nullptr, nullptr, { &s_a191290363edf5df, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<95> b_ebdef3e6cde209ea = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    234,   9, 226, 205, 230, 243, 222, 235,
     14,   0,   0,   0,   1,   0,   2,   0,
    147, 150, 249, 125, 117,  77,  89, 212,
      1,   0,   7,   0,   0,   0,   5,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  70, 108,
    101, 120,  86,  97, 108, 117, 101,  67,
     97, 112,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      4,   0, 251, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    144,   0,   0,   0,   3,   0,   1,   0,
    156,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 116,  86,  97, 108,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  86,  97, 108,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 111, 111, 108,  86,  97, 108,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 111, 117,  98, 108, 101,  86,  97,
    108,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 105, 110, 103,  86,  97,
    108,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ebdef3e6cde209ea = b_ebdef3e6cde209ea.words;
#if !CAPNP_LITE
static const uint16_t m_ebdef3e6cde209ea[] = {2, 3, 0, 4, 1};
static const uint16_t i_ebdef3e6cde209ea[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_ebdef3e6cde209ea = {
  0xebdef3e6cde209ea, b_ebdef3e6cde209ea.words, 95, nullptr, m_ebdef3e6cde209ea,
  0, 5, i_ebdef3e6cde209ea, nullptr, nullptr, { &s_ebdef3e6cde209ea, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<63> b_e8af8ae547fb556a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    106,  85, 251,  71, 229, 138, 175, 232,
     14,   0,   0,   0,   1,   0,   1,   0,
    147, 150, 249, 125, 117,  77,  89, 212,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  73,  79,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    234,   9, 226, 205, 230, 243, 222, 235,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 118, 101, 114, 114, 105, 100, 100,
    101, 110,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8af8ae547fb556a = b_e8af8ae547fb556a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e8af8ae547fb556a[] = {
  &s_ebdef3e6cde209ea,
};
static const uint16_t m_e8af8ae547fb556a[] = {0, 2, 1};
static const uint16_t i_e8af8ae547fb556a[] = {0, 1, 2};
const ::capnp::_::RawSchema s_e8af8ae547fb556a = {
  0xe8af8ae547fb556a, b_e8af8ae547fb556a.words, 63, d_e8af8ae547fb556a, m_e8af8ae547fb556a,
  1, 3, i_e8af8ae547fb556a, nullptr, nullptr, { &s_e8af8ae547fb556a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<54> b_e0ea3d8edf5a7d72 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    114, 125,  90, 223, 142,  61, 234, 224,
     14,   0,   0,   0,   1,   0,   1,   0,
    147, 150, 249, 125, 117,  77,  89, 212,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97,  99, 107,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  85, 112,
    100,  97, 116, 101, 100,  79, 117, 116,
    112, 117, 116, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
     73, 100,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 112, 100,  97, 116, 101, 100,  79,
    117, 116, 112, 117, 116,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    106,  85, 251,  71, 229, 138, 175, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e0ea3d8edf5a7d72 = b_e0ea3d8edf5a7d72.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e0ea3d8edf5a7d72[] = {
  &s_e8af8ae547fb556a,
};
static const uint16_t m_e0ea3d8edf5a7d72[] = {0, 1};
static const uint16_t i_e0ea3d8edf5a7d72[] = {0, 1};
const ::capnp::_::RawSchema s_e0ea3d8edf5a7d72 = {
  0xe0ea3d8edf5a7d72, b_e0ea3d8edf5a7d72.words, 54, d_e0ea3d8edf5a7d72, m_e0ea3d8edf5a7d72,
  1, 2, i_e0ea3d8edf5a7d72, nullptr, nullptr, { &s_e0ea3d8edf5a7d72, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::Engine::RegisterPackageManagerParams,  ::Engine::RegisterPackageManagerResults>
Engine::Client::registerPackageManagerRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::RegisterPackageManagerParams,  ::Engine::RegisterPackageManagerResults>(
      0x842cb2753c174959ull, 0, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::registerPackageManager(RegisterPackageManagerContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "registerPackageManager",
      0x842cb2753c174959ull, 0);
}
::capnp::Request< ::Engine::UpdatesAvailableParams,  ::Engine::UpdatesAvailableResults>
Engine::Client::updatesAvailableRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::UpdatesAvailableParams,  ::Engine::UpdatesAvailableResults>(
      0x842cb2753c174959ull, 1, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::updatesAvailable(UpdatesAvailableContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "updatesAvailable",
      0x842cb2753c174959ull, 1);
}
::capnp::Request< ::Engine::AddNodeParams,  ::Engine::AddNodeResults>
Engine::Client::addNodeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::AddNodeParams,  ::Engine::AddNodeResults>(
      0x842cb2753c174959ull, 2, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::addNode(AddNodeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "addNode",
      0x842cb2753c174959ull, 2);
}
::capnp::Request< ::Engine::UpdateNodeParams,  ::Engine::UpdateNodeResults>
Engine::Client::updateNodeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::UpdateNodeParams,  ::Engine::UpdateNodeResults>(
      0x842cb2753c174959ull, 3, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::updateNode(UpdateNodeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "updateNode",
      0x842cb2753c174959ull, 3);
}
::capnp::Request< ::Engine::RemoveNodeParams,  ::Engine::RemoveNodeResults>
Engine::Client::removeNodeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::RemoveNodeParams,  ::Engine::RemoveNodeResults>(
      0x842cb2753c174959ull, 4, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::removeNode(RemoveNodeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "removeNode",
      0x842cb2753c174959ull, 4);
}
::capnp::Request< ::Engine::AddEdgeParams,  ::Engine::AddEdgeResults>
Engine::Client::addEdgeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::AddEdgeParams,  ::Engine::AddEdgeResults>(
      0x842cb2753c174959ull, 5, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::addEdge(AddEdgeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "addEdge",
      0x842cb2753c174959ull, 5);
}
::capnp::Request< ::Engine::RemoveEdgeParams,  ::Engine::RemoveEdgeResults>
Engine::Client::removeEdgeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::RemoveEdgeParams,  ::Engine::RemoveEdgeResults>(
      0x842cb2753c174959ull, 6, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::removeEdge(RemoveEdgeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "removeEdge",
      0x842cb2753c174959ull, 6);
}
::capnp::Request< ::Engine::SetDefaultParams,  ::Engine::SetDefaultResults>
Engine::Client::setDefaultRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::SetDefaultParams,  ::Engine::SetDefaultResults>(
      0x842cb2753c174959ull, 7, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::setDefault(SetDefaultContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "setDefault",
      0x842cb2753c174959ull, 7);
}
::capnp::Request< ::Engine::SetOverrideParams,  ::Engine::SetOverrideResults>
Engine::Client::setOverrideRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::SetOverrideParams,  ::Engine::SetOverrideResults>(
      0x842cb2753c174959ull, 8, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::setOverride(SetOverrideContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "setOverride",
      0x842cb2753c174959ull, 8);
}
::capnp::Request< ::Engine::SetFallbackParams,  ::Engine::SetFallbackResults>
Engine::Client::setFallbackRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::SetFallbackParams,  ::Engine::SetFallbackResults>(
      0x842cb2753c174959ull, 9, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::setFallback(SetFallbackContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "setFallback",
      0x842cb2753c174959ull, 9);
}
::capnp::Request< ::Engine::GetAllValuesParams,  ::Engine::GetAllValuesResults>
Engine::Client::getAllValuesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::GetAllValuesParams,  ::Engine::GetAllValuesResults>(
      0x842cb2753c174959ull, 10, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::getAllValues(GetAllValuesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "getAllValues",
      0x842cb2753c174959ull, 10);
}
::capnp::Request< ::Engine::GetAvailablePackagesParams,  ::Engine::GetAvailablePackagesResults>
Engine::Client::getAvailablePackagesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::GetAvailablePackagesParams,  ::Engine::GetAvailablePackagesResults>(
      0x842cb2753c174959ull, 11, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::getAvailablePackages(GetAvailablePackagesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "getAvailablePackages",
      0x842cb2753c174959ull, 11);
}
::capnp::Request< ::Engine::GetPackageJsonParams,  ::Engine::GetPackageJsonResults>
Engine::Client::getPackageJsonRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::GetPackageJsonParams,  ::Engine::GetPackageJsonResults>(
      0x842cb2753c174959ull, 12, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::getPackageJson(GetPackageJsonContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "getPackageJson",
      0x842cb2753c174959ull, 12);
}
::capnp::Request< ::Engine::GetFlowJsonParams,  ::Engine::GetFlowJsonResults>
Engine::Client::getFlowJsonRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Engine::GetFlowJsonParams,  ::Engine::GetFlowJsonResults>(
      0x842cb2753c174959ull, 13, sizeHint, {true});
}
::kj::Promise<void> Engine::Server::getFlowJson(GetFlowJsonContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:Engine", "getFlowJson",
      0x842cb2753c174959ull, 13);
}
::capnp::Capability::Server::DispatchCallResult Engine::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x842cb2753c174959ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("package.capnp:Engine", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Engine::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        registerPackageManager(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::RegisterPackageManagerParams,  ::Engine::RegisterPackageManagerResults>(context)),
        false,
        false
      };
    case 1:
      return {
        updatesAvailable(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::UpdatesAvailableParams,  ::Engine::UpdatesAvailableResults>(context)),
        false,
        false
      };
    case 2:
      return {
        addNode(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::AddNodeParams,  ::Engine::AddNodeResults>(context)),
        false,
        false
      };
    case 3:
      return {
        updateNode(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::UpdateNodeParams,  ::Engine::UpdateNodeResults>(context)),
        false,
        false
      };
    case 4:
      return {
        removeNode(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::RemoveNodeParams,  ::Engine::RemoveNodeResults>(context)),
        false,
        false
      };
    case 5:
      return {
        addEdge(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::AddEdgeParams,  ::Engine::AddEdgeResults>(context)),
        false,
        false
      };
    case 6:
      return {
        removeEdge(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::RemoveEdgeParams,  ::Engine::RemoveEdgeResults>(context)),
        false,
        false
      };
    case 7:
      return {
        setDefault(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::SetDefaultParams,  ::Engine::SetDefaultResults>(context)),
        false,
        false
      };
    case 8:
      return {
        setOverride(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::SetOverrideParams,  ::Engine::SetOverrideResults>(context)),
        false,
        false
      };
    case 9:
      return {
        setFallback(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::SetFallbackParams,  ::Engine::SetFallbackResults>(context)),
        false,
        false
      };
    case 10:
      return {
        getAllValues(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::GetAllValuesParams,  ::Engine::GetAllValuesResults>(context)),
        false,
        false
      };
    case 11:
      return {
        getAvailablePackages(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::GetAvailablePackagesParams,  ::Engine::GetAvailablePackagesResults>(context)),
        false,
        false
      };
    case 12:
      return {
        getPackageJson(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::GetPackageJsonParams,  ::Engine::GetPackageJsonResults>(context)),
        false,
        false
      };
    case 13:
      return {
        getFlowJson(::capnp::Capability::Server::internalGetTypedContext<
             ::Engine::GetFlowJsonParams,  ::Engine::GetFlowJsonResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "package.capnp:Engine",
          0x842cb2753c174959ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Engine
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::RegisterPackageManagerParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::RegisterPackageManagerParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::RegisterPackageManagerParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::RegisterPackageManagerParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::RegisterPackageManagerParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::RegisterPackageManagerResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::RegisterPackageManagerResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::RegisterPackageManagerResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::RegisterPackageManagerResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::RegisterPackageManagerResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::UpdatesAvailableParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::UpdatesAvailableParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::UpdatesAvailableParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::UpdatesAvailableParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::UpdatesAvailableParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::UpdatesAvailableResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::UpdatesAvailableResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::UpdatesAvailableResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::UpdatesAvailableResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::UpdatesAvailableResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::AddNodeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::AddNodeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::AddNodeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::AddNodeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::AddNodeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::AddNodeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::AddNodeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::AddNodeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::AddNodeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::AddNodeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::UpdateNodeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::UpdateNodeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::UpdateNodeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::UpdateNodeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::UpdateNodeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::UpdateNodeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::UpdateNodeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::UpdateNodeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::UpdateNodeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::UpdateNodeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::RemoveNodeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::RemoveNodeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::RemoveNodeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::RemoveNodeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::RemoveNodeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::RemoveNodeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::RemoveNodeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::RemoveNodeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::RemoveNodeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::RemoveNodeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::AddEdgeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::AddEdgeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::AddEdgeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::AddEdgeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::AddEdgeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::AddEdgeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::AddEdgeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::AddEdgeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::AddEdgeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::AddEdgeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::RemoveEdgeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::RemoveEdgeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::RemoveEdgeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::RemoveEdgeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::RemoveEdgeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::RemoveEdgeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::RemoveEdgeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::RemoveEdgeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::RemoveEdgeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::RemoveEdgeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::SetDefaultParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::SetDefaultParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::SetDefaultParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::SetDefaultParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::SetDefaultParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::SetDefaultResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::SetDefaultResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::SetDefaultResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::SetDefaultResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::SetDefaultResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::SetOverrideParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::SetOverrideParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::SetOverrideParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::SetOverrideParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::SetOverrideParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::SetOverrideResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::SetOverrideResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::SetOverrideResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::SetOverrideResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::SetOverrideResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::SetFallbackParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::SetFallbackParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::SetFallbackParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::SetFallbackParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::SetFallbackParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::SetFallbackResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::SetFallbackResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::SetFallbackResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::SetFallbackResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::SetFallbackResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::GetAllValuesParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::GetAllValuesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::GetAllValuesParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::GetAllValuesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::GetAllValuesParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::GetAllValuesResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::GetAllValuesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::GetAllValuesResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::GetAllValuesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::GetAllValuesResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::GetAvailablePackagesParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::GetAvailablePackagesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::GetAvailablePackagesParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::GetAvailablePackagesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::GetAvailablePackagesParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::GetAvailablePackagesResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::GetAvailablePackagesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::GetAvailablePackagesResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::GetAvailablePackagesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::GetAvailablePackagesResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::GetPackageJsonParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::GetPackageJsonParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::GetPackageJsonParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::GetPackageJsonParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::GetPackageJsonParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::GetPackageJsonResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::GetPackageJsonResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::GetPackageJsonResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::GetPackageJsonResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::GetPackageJsonResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::GetFlowJsonParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::GetFlowJsonParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::GetFlowJsonParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::GetFlowJsonParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::GetFlowJsonParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Engine::GetFlowJsonResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Engine::GetFlowJsonResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Engine::GetFlowJsonResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Engine::GetFlowJsonResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Engine::GetFlowJsonResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::PackageManager::InstantiateNodeParams,  ::PackageManager::InstantiateNodeResults>
PackageManager::Client::instantiateNodeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::PackageManager::InstantiateNodeParams,  ::PackageManager::InstantiateNodeResults>(
      0x987e5f5d90018518ull, 0, sizeHint, {true});
}
::kj::Promise<void> PackageManager::Server::instantiateNode(InstantiateNodeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:PackageManager", "instantiateNode",
      0x987e5f5d90018518ull, 0);
}
::capnp::Request< ::PackageManager::RemoveNodeParams,  ::PackageManager::RemoveNodeResults>
PackageManager::Client::removeNodeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::PackageManager::RemoveNodeParams,  ::PackageManager::RemoveNodeResults>(
      0x987e5f5d90018518ull, 1, sizeHint, {true});
}
::kj::Promise<void> PackageManager::Server::removeNode(RemoveNodeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:PackageManager", "removeNode",
      0x987e5f5d90018518ull, 1);
}
::capnp::Request< ::PackageManager::GetUpdatesParams,  ::PackageManager::GetUpdatesResults>
PackageManager::Client::getUpdatesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::PackageManager::GetUpdatesParams,  ::PackageManager::GetUpdatesResults>(
      0x987e5f5d90018518ull, 2, sizeHint, {true});
}
::kj::Promise<void> PackageManager::Server::getUpdates(GetUpdatesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:PackageManager", "getUpdates",
      0x987e5f5d90018518ull, 2);
}
::capnp::Request< ::PackageManager::EvaluateNodeParams,  ::PackageManager::EvaluateNodeResults>
PackageManager::Client::evaluateNodeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::PackageManager::EvaluateNodeParams,  ::PackageManager::EvaluateNodeResults>(
      0x987e5f5d90018518ull, 3, sizeHint, {true});
}
::kj::Promise<void> PackageManager::Server::evaluateNode(EvaluateNodeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:PackageManager", "evaluateNode",
      0x987e5f5d90018518ull, 3);
}
::capnp::Request< ::PackageManager::ResetParams,  ::PackageManager::ResetResults>
PackageManager::Client::resetRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::PackageManager::ResetParams,  ::PackageManager::ResetResults>(
      0x987e5f5d90018518ull, 4, sizeHint, {true});
}
::kj::Promise<void> PackageManager::Server::reset(ResetContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "package.capnp:PackageManager", "reset",
      0x987e5f5d90018518ull, 4);
}
::capnp::Capability::Server::DispatchCallResult PackageManager::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x987e5f5d90018518ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("package.capnp:PackageManager", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult PackageManager::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        instantiateNode(::capnp::Capability::Server::internalGetTypedContext<
             ::PackageManager::InstantiateNodeParams,  ::PackageManager::InstantiateNodeResults>(context)),
        false,
        false
      };
    case 1:
      return {
        removeNode(::capnp::Capability::Server::internalGetTypedContext<
             ::PackageManager::RemoveNodeParams,  ::PackageManager::RemoveNodeResults>(context)),
        false,
        false
      };
    case 2:
      return {
        getUpdates(::capnp::Capability::Server::internalGetTypedContext<
             ::PackageManager::GetUpdatesParams,  ::PackageManager::GetUpdatesResults>(context)),
        false,
        false
      };
    case 3:
      return {
        evaluateNode(::capnp::Capability::Server::internalGetTypedContext<
             ::PackageManager::EvaluateNodeParams,  ::PackageManager::EvaluateNodeResults>(context)),
        false,
        false
      };
    case 4:
      return {
        reset(::capnp::Capability::Server::internalGetTypedContext<
             ::PackageManager::ResetParams,  ::PackageManager::ResetResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "package.capnp:PackageManager",
          0x987e5f5d90018518ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// PackageManager
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PackageManager::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PackageManager::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PackageManager::InstantiateNodeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PackageManager::InstantiateNodeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t PackageManager::InstantiateNodeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PackageManager::InstantiateNodeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PackageManager::InstantiateNodeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PackageManager::InstantiateNodeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PackageManager::InstantiateNodeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t PackageManager::InstantiateNodeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PackageManager::InstantiateNodeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PackageManager::InstantiateNodeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PackageManager::RemoveNodeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PackageManager::RemoveNodeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t PackageManager::RemoveNodeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PackageManager::RemoveNodeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PackageManager::RemoveNodeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PackageManager::RemoveNodeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PackageManager::RemoveNodeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t PackageManager::RemoveNodeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PackageManager::RemoveNodeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PackageManager::RemoveNodeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PackageManager::GetUpdatesParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PackageManager::GetUpdatesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t PackageManager::GetUpdatesParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PackageManager::GetUpdatesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PackageManager::GetUpdatesParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PackageManager::GetUpdatesResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PackageManager::GetUpdatesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t PackageManager::GetUpdatesResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PackageManager::GetUpdatesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PackageManager::GetUpdatesResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PackageManager::EvaluateNodeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PackageManager::EvaluateNodeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t PackageManager::EvaluateNodeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PackageManager::EvaluateNodeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PackageManager::EvaluateNodeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PackageManager::EvaluateNodeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PackageManager::EvaluateNodeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t PackageManager::EvaluateNodeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PackageManager::EvaluateNodeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PackageManager::EvaluateNodeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PackageManager::ResetParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PackageManager::ResetParams::_capnpPrivate::dataWordSize;
constexpr uint16_t PackageManager::ResetParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PackageManager::ResetParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PackageManager::ResetParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PackageManager::ResetResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PackageManager::ResetResults::_capnpPrivate::dataWordSize;
constexpr uint16_t PackageManager::ResetResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PackageManager::ResetResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PackageManager::ResetResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Node
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Node::_capnpPrivate::dataWordSize;
constexpr uint16_t Node::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Node::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Node::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// EdgeMessage
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t EdgeMessage::_capnpPrivate::dataWordSize;
constexpr uint16_t EdgeMessage::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind EdgeMessage::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EdgeMessage::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// NodeDetails
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t NodeDetails::_capnpPrivate::dataWordSize;
constexpr uint16_t NodeDetails::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind NodeDetails::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* NodeDetails::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// PackageDetails
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t PackageDetails::_capnpPrivate::dataWordSize;
constexpr uint16_t PackageDetails::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind PackageDetails::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PackageDetails::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// FlexValueCap
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t FlexValueCap::_capnpPrivate::dataWordSize;
constexpr uint16_t FlexValueCap::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind FlexValueCap::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FlexValueCap::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// IO
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t IO::_capnpPrivate::dataWordSize;
constexpr uint16_t IO::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind IO::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IO::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// UpdatedOutputs
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t UpdatedOutputs::_capnpPrivate::dataWordSize;
constexpr uint16_t UpdatedOutputs::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind UpdatedOutputs::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* UpdatedOutputs::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



